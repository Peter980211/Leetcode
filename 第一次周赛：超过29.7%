//5417. Maximum Number of Vowels in a Substring of Given Length
//利用滑动窗口解决问题，复杂度低很多。暴力解超时。
class Solution {
    public int maxVowels(String s, int k) {
        int base = 0;
        int max;
        int i;
        int j = k;
        if(k > s.length()){
            k = s.length();
        }
        for(i = 0; i < k; i++){
            if(isVowel(s.charAt(i))){
                base++;
            }
        }
        max = base;
        for(i = 0; i < s.length() - k; i++){
            if(isVowel(s.charAt(i))){
                base--;
            }
            if(isVowel(s.charAt(j))){
                base++;
            }
            j++;
            if(base > max){
                max = base;
            }
        }
        return max;
    }
    private boolean isVowel(char c){
        if(c == 'a' || c == 'e' || c =='i' || c == 'o' || c == 'u'){
            return true;
        }
        return false;
    }
}

//5418. Pseudo-Palindromic Paths in a Binary Tree
//使用DFS，判断是否为伪回文的时候想利用亦或，但是有问题。应当使用哈希。超时4分钟才想出来。
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int pseudoPalindromicPaths (TreeNode root) {
        int count = 0;
        List<List<Integer>> lists = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        cur.add(root.val);
        dfs(root, lists, cur);
        System.out.println(lists.toString());
        for(int i = 0; i < lists.size(); i++){
            if(testP(lists.get(i)) == true){
                System.out.println(i);
                count++;
            }
        }
        return count;
    }
    private boolean testP(List<Integer> l){
        int count = 0;
        int i;
        int[] check = new int[10];
        Arrays.fill(check, 0);
        for(i = 0; i < l.size(); i++){
            int a = l.get(i);
            if(check[a] == 1){
                check[a]--;
            }else if(check[a] == 0){
                check[a]++;
            }
        }
        for(i = 0; i < 10; i++){
            if(check[i] == 1){
                count++;
            }
        }
        if(count == 1 || count == 0){
            return true;
        }
        return false;
    }
    private void dfs(TreeNode root, List<List<Integer>> lists, List<Integer> cur){
        if(root.left == null && root.right == null){
            lists.add(new ArrayList<>(cur));
            return;
        }
        if(root.left != null){
            cur.add(root.left.val);
            dfs(root.left,lists,cur);
            cur.remove(cur.size() - 1);
        }
        if(root.right != null){
            cur.add(root.right.val);
            dfs(root.right,lists,cur);
            cur.remove(cur.size() - 1);
        }
    }
}
