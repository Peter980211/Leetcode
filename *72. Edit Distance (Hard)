/*
以 word1 为 "horse"，word2 为 "ros"，且 dp[5][3] 为例，即要将 word1的前 5 个字符转换为 word2的前 3 个字符，也就是将 horse 转换为 ros，因此有：

(1) dp[i-1][j-1]，即先将 word1 的前 4 个字符 hors 转换为 word2 的前 2 个字符 ro，然后将第五个字符 word1[4]（因为下标基数以 0 开始） 由 e 替换为 s（即替换为 word2 的第三个字符，word2[2]）

(2) dp[i][j-1]，即先将 word1 的前 5 个字符 horse 转换为 word2 的前 2 个字符 ro，然后在末尾补充一个 s，即插入操作

(3) dp[i-1][j]，即先将 word1 的前 4 个字符 hors 转换为 word2 的前 3 个字符 ros，然后删除 word1 的第 5 个字符
*/

class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length()+1;
        int n = word2.length()+1;
        int[][] d = new int[m][n];
        int i;
        int j;
        for(i = 0; i < m; i++){
            for(j = 0; j < n; j++){
                if(i == 0){
                    d[i][j] = j;
                    continue;
                }
                if(j == 0){
                    d[i][j] = i;
                    continue;
                }
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    d[i][j] = d[i-1][j-1];
                }else{
                    d[i][j]=Math.min(d[i-1][j],Math.min(d[i-1][j-1],d[i][j-1]))+1;
                }

            }
        }
        return d[m-1][n-1];
    }
}
